fastlane_require 'fileutils'

lane :update_analysis_options do
  # TODO(dotdoom): move into fastlane-flutter plugin.

  File.write(
    '../flutter/analysis_options.autogen.yaml',
    <<-YAML)
include: package:flutter/analysis_options_user.yaml
#{open(
  'https://raw.githubusercontent.com/dart-lang/linter/master/example/all.yaml'
).read}
  YAML
end

desc 'Update dependencies in lockfiles (npm, Flutter), excluding bundler'
lane :update do
  update_analysis_options
  Dir.chdir('..') do
    Dir.chdir('flutter') do
      Dir.chdir('fastlane') do
        # This will automatically upgrade flutter, if necessary. It won't run
        # "flutter update-packages", but we don't need it.
        flutter_bootstrap(flutter_channel: 'stable')

        # Upgrade current application packages (within pubspec.yaml spec).
        flutter(args: %w(packages upgrade))
      end

      # Regenerate files in case updated generators (or formatter) produce
      # different output. Also fastlane itself can also update some of its files
      # such as README, when we run it.
      sh %w(bundle exec fastlane generate)

      if RUBY_PLATFORM.include? 'darwin'
        # These files will be automatically re-generated by the build.
        podfile_path = 'ios/Podfile'
        [podfile_path, "#{podfile_path}.lock"].each do |fn|
          File.delete(fn) if File.exist?(fn)
        end
        Dir.chdir('fastlane') do
          flutter_build(
            build: 'ios',
            debug: true,
            build_args: ['--no-codesign'],
          )
        end

        Dir.chdir('ios') do
          sh %w(bundle exec pod update)
        end
      end
    end
    %w(firebase firebase/functions).each do |dir|
      Dir.chdir(dir) do
        FileUtils.rm_rf('node_modules')
        sh %w(npm install)
        sh %w(npm update --dev)
        sh %w(npm audit fix)
        # And autofix any lint errors.
        sh %w(npm run fix)
      end if File.directory?(dir)
    end
  end
end

def _github_fork_name()
  git_remotes = sh(%w(git remote)).split
  # Definitely not what we want.
  git_remotes.delete('upstream')
  # Try to use "origin" if we have it, otherwise whatever we have.
  origin_git_remote = git_remotes.include?('origin') ?
    'origin' : git_remotes.first

  raise 'No Git remotes found usable for heuristics' unless origin_git_remote

  fastlane_require 'git/remote/parser'
  url_parser = Git::Remote::Parser.new
  url_parser.parse(
    sh(%W(git remote get-url #{origin_git_remote})).strip
  ).owner
rescue => e
  UI.important(e)
  UI.input('Cannot autodetect fork name. What is your GitHub handle? ')
end

desc 'Create or migrate a debug Firebase project for this GitHub fork'
lane :setup do
  Dir.chdir('../firebase') do
    software = {
      'NodeJS npm' => [
        lambda { Helper.backticks('npm --version') },
        'https://nodejs.org/',
      ],
      'keytool from JDK' => [
        lambda do
          sh(%w(keytool -help), log: false)
          # Keytool does not seem to have a flag to print its version, but will
          # succeed if used with "-help" flag (otherwise sh() will fail).
          'some version'
        end,
        'https://www3.ntu.edu.sg/home/ehchua/programming/howto/JDK_Howto.html',
      ],
    }.map do |software_name, (version_getter, download_url)|
      begin
        "✔️ #{software_name} (you have #{version_getter[].strip} installed)"
      rescue
        "⚠️ #{software_name} (download at #{download_url})"
      end
    end

    puts <<INFO
Welcome to Fastlane Setup tool!

This tool requires the following software to be installed on this computer (and
corresponding binaries must be in your PATH environment variable):

#{software.map { |s| "  - #{s}" }.join("\n")}

We will proceed now anyway, but if some of this software is missing, you will
likely get an error!

INFO

    if File.read('../flutter/android/app/src/main/AndroidManifest.xml') =~
        /package="org[.]dasfoo[.]([^"]+)"/
      product = $1
    end

    project_id = "#{product}-debug-#{_github_fork_name()}"
    sh %w(npm install)
    if File.directory?('functions')
      Dir.chdir('functions') { sh %w(npm install) }
    end
    fastlane_require 'shellwords'
    # Give Firebase login interactive mode and do not crop lines.
    exec %W(npm start -- #{project_id}).shelljoin
  end
end

# vim: ft=ruby

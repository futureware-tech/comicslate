fastlane_require 'fileutils'

if File.read('../android/app/src/main/AndroidManifest.xml') =~
    /package="([^"]+)"/
  APP_IDENTIFIER = $1
end
default_platform(:android)

module SharedValues
  PROMOTE_RELEASE = :PROMOTE_RELEASE
end

before_all do |lane, options|
  if [:build, :distribute, :publish].include?(lane)
    commits_since_last_tag = changelog_from_git_commits(
      quiet: true,
      # One line per commit, which allows us to easily count them.
      pretty: 'oneline',
      # We push to "master" only when merging a PR, so increment with each merge.
      merge_commit_filtering: 'only_include_merges',
    ).lines.count
    # changelog_from_git_commits populates this context, causing some actions
    # (e.g. upload_to_testflight) to pick it up instead of our text files.
    lane_context.delete(SharedValues::FL_CHANGELOG)

    # Keep even numbers for internal releases, and odd numbers for public, to
    # make sure they do not clash as the number of commits is usually the same.
    lane_context[SharedValues::BUILD_NUMBER] = number_of_commits * 2 + 1000
    lane_context[SharedValues::VERSION_NUMBER] = options[:release].to_s
    if lane_context[SharedValues::VERSION_NUMBER].empty?
      lane_context[SharedValues::VERSION_NUMBER] = '%s.%d' % [
        # First 2 digits of version number are taken from tag (ex.: "2.1").
        last_git_tag,
        # Add the number of commits afterwards, multiplied by 10 to allow room
        # for manual testing of CI/CD, if necessary.
        commits_since_last_tag * 10,
      ]
      lane_context[SharedValues::PROMOTE_RELEASE] = false
    else
      # We complement the tag (e.g. "2.1") to "2.1.0", which App Store will do
      # anyway, but this way we also make it consistent with Play Store.
      lane_context[SharedValues::VERSION_NUMBER] += '.0'
      lane_context[SharedValues::BUILD_NUMBER] += 1
      lane_context[SharedValues::PROMOTE_RELEASE] = true
    end
  end
end

def retry_on_exception(extra_attempts=2, initial_delay=1)
  extra_attempts -= 1
  yield
rescue => e
  raise if extra_attempts < 0

  UI.error(e)
  if extra_attempts > 0
    UI.important("Retrying after #{initial_delay}s, " \
                 "#{extra_attempts + 1} attempts left!")
  else
    UI.important("Retrying after #{initial_delay}s, last attempt!")
  end

  sleep(initial_delay)
  initial_delay *= 2
  retry
end

desc 'Install or upgrade Flutter and Android SDK licenses'
lane :install_dependencies do
  bootstrap_options = {
    # We pin flutter to a specific version, don't want autoupdate during build.
    flutter_auto_upgrade: false,
  }

  if ENV.key?('ANDROID_SDK_ROOT')
    # License hashes. These are NOT secret!
    # Copy them from $ANDROID_SDK_ROOT/licenses/ directory for the license
    # agreements you accept.
    bootstrap_options[:android_licenses] = {
      'android-sdk-license' => '24333f8a63b6825ea9c5514f83c2829b004d1fee',
    }
  end

  flutter_bootstrap(bootstrap_options)
end

desc 'Generate files for Intl and built_value and format all files'
lane :generate do
  flutter_generate(
    intl_strings_file: 'lib/l10n/app_localizations.dart',
    intl_strings_locale: 'en_US',
    coverage_all_imports: true,
  )
  flutter(args: %w(format .))
end

desc 'Run static analysis on Flutter files'
lane :lint do
  flutter(args: %w(analyze))

  error_count = 0
  Dir.chdir('..') do
    Dir['lib/**/*.dart'].each do |dart_file|
      if File.read(dart_file).include?('DateTime.now()')
        UI.error(
          "- #{dart_file}: use clock.now() instead of DateTime.now()."
        )
        error_count += 1
      end
    end
  end
  UI.user_error!("#{error_count} error(s) found.") if error_count > 0
end

desc 'Install Google Services configs for the CI Firebase project'
lane :install_ci_keys do |options|
  if File.directory?('keys')
    FileUtils.cp(
      'keys/ci/google-services.json',
      '../android/app/google-services.json',
      verbose: true)
    FileUtils.cp(
      'keys/ci/GoogleService-Info.plist',
      '../ios/Runner/GoogleService-Info.plist',
      verbose: true)
    FileUtils.cp(
      'keys/ci/FirebaseLocalDeveloper.xcconfig',
      '../ios/Flutter/',
      verbose: true)
  end
end

platform :android do
  desc 'Build a debug APK'
  lane :build do
    # Occasionally build may fail due to a network error.
    retry_on_exception do
      flutter_build(debug: true)
    end
  end

  desc 'Build current source tree in debug mode and distribute it via Firebase'
  desc 'App Distribution'
  lane :distribute do |options|
    config = JSON.parse(File.read('../android/app/google-services.json'))
    project_id = config['project_info']['project_id']
    app_id = config['client'][0]['client_info']['mobilesdk_app_id']
    UI.message("Building APK to distribute to application #{app_id.inspect}")
    flutter_build(build: 'apk', debug: true)
    distribute_to_groups = options[:groups] || 'fastlane'
    begin
      firebase_app_distribution(
        app: app_id,
        firebase_cli_path:
          File.expand_path('../../firebase/node_modules/.bin/firebase'),
        release_notes: changelog_from_git_commits(
          quiet: true,
          merge_commit_filtering: 'exclude_merges',
        ),
        groups: distribute_to_groups,
      )
    rescue FastlaneCore::Interface::FastlaneShellError => e
      if e.message.include?('failed to add testers/groups: invalid groups')
        UI.error(
          "Failed to distribute the app. Make sure you have created group(s) " \
          "#{distribute_to_groups.inspect} at https://" \
          "console.firebase.google.com/project/#{project_id}/appdistribution " \
          "on the 'Testers and Groups' tab."
        )
      else
        raise
      end
    end
  end

  desc 'Build a release AAB and publish it (including Store artifacts).'
  desc 'Set "release" lane key to non-empty value to upload to "alpha" track.'
  lane :publish do |options|
    # Occasionally build may fail due to a network error.
    aab = retry_on_exception do
      flutter_build(build: 'appbundle')
    end

    retry_on_exception do
      supply(
        track: lane_context[SharedValues::PROMOTE_RELEASE] ? 'alpha'
                                                           : 'internal',
        package_name: APP_IDENTIFIER,
        aab: aab,
      )
    end

    # This is the standard release name format, used by Sentry.io clients by
    # default.
    sentry_release = '%s@%s+%s' % [
      APP_IDENTIFIER,
      lane_context[SharedValues::VERSION_NUMBER],
      lane_context[SharedValues::BUILD_NUMBER],
    ]
    project = ENV['GITHUB_REPOSITORY'].split('/').last
    sh %W(sentry-cli releases --org dasfoo new -p #{project} #{sentry_release})
    sh %W(sentry-cli releases --org dasfoo set-commits --auto #{sentry_release})
    sh %W(sentry-cli releases --org dasfoo finalize #{sentry_release})
  end
end

platform :ios do
  desc 'Build a debug iOS package'
  lane :build do
    # Occasionally build may fail due to a network error.
    retry_on_exception do
      flutter_build(
        debug: true,
        build_args: ['--no-codesign'],
      )
    end
  end

  desc 'Build a release iOS package and publish it (including Store artifacts).'
  desc 'Set "release" lane key to non-empty value to upload metadata.'
  lane :publish do |options|
    # Set up OS X keychain and switch match to readonly model. This command has
    # no effect outside CI.
    setup_travis

    # Pulling in the certificates repository may occasionally fail.
    retry_on_exception do
      match(
        type: 'appstore',
        app_identifier: APP_IDENTIFIER,
      )
    end
    FileUtils.cp(
      'keys/prod/GoogleService-Info.plist',
      '../ios/Runner/GoogleService-Info.plist',
      verbose: true) if File.directory?('keys')

    retry_on_exception do
      flutter_build(build_args: ['--config-only'])
    end
    gym(silent: true, suppress_xcode_output: true)

    begin
      config = {
        distribute_external: true,
        notify_external_testers: true,
        # This is supposed to be the latest build, reject builds already
        # waiting review (only applies to TestFlight reviews, not App Store!).
        reject_build_waiting_for_review: true,
        # Changelog is required for TestFlight.
        changelog: 'Please look for the latest changes at ' +
            "https://github.com/#{ENV['GITHUB_REPOSITORY']}/commits/master",
        groups: lane_context[SharedValues::PROMOTE_RELEASE] ? ['alpha']
                                                            : ['internal'],
      }
      retry_on_exception do
        begin
          upload_to_testflight(config)
        rescue => e
          # It is possible that the binary has been uploaded, but failed to
          # distribute. It is not allowed to upload the binary twice, so retries
          # will fail, but if we can distribute this binary without an error,
          # then we have achieved what we wanted.
          UI.error("upload + distribute failed: #{e}; retrying distribute")
          upload_to_testflight(config.merge(
            distribute_only: true,
            # Has to be specified -- otherwise, the latest build is distributed.
            build_number: lane_context[SharedValues::BUILD_NUMBER].to_s,
            # Without specifying this, list presence check is stuck forever.
            app_version: lane_context[SharedValues::VERSION_NUMBER],
            # When uploading, this value is taken from IPA, but for distribution
            # it is unknown.
            app_identifier: APP_IDENTIFIER,
          ))
        end
      end
    ensure
      # It is possible that the above build has not been distributed to testers,
      # but it was uploaded nevertheless. In such case, we still try and send it
      # for review, allowing humans to fix the issue with distributing.
      if lane_context[SharedValues::PROMOTE_RELEASE]
        retry_on_exception do
          upload_to_app_store(
            # Publishing to AppStore fails with message
            # Precheck cannot check In-app purchases with the App Store
            # Connect API Key
            # Therefore we set this property to false as described here:
            # https://github.com/fastlane/fastlane/issues/18250
            precheck_include_in_app_purchases: false,
            app_identifier: APP_IDENTIFIER,
            overwrite_screenshots: true,
            submit_for_review: true,
            submission_information: {
              add_id_info_uses_idfa: false,

              # We use https protocol.
              export_compliance_uses_encryption: true,
              export_compliance_is_exempt: true,
            },

            # Skip the HTML report file verification.
            force: true,

            # Binary is already uploaded by upload_to_testflight, just use it.
            skip_binary_upload: true,
            build_number: lane_context[SharedValues::BUILD_NUMBER].to_s,

            # Override because defaults make directory layout messy.
            # Default is: "screenshots".
            screenshots_path: File.join(Dir.pwd, 'metadata/ios/screenshots'),
            # Default is: "metadata". Also have to bury it into additional
            # directory because storing metadata in "metadata/ios" complains
            # about unrecognized subdirectory "screenshots".
            metadata_path: File.join(Dir.pwd, 'metadata/ios/metadata'),
          )
        end
      end
    end
  end
end

# vim: ft=ruby
